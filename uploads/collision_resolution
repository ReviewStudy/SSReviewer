> Hash의 Collision을 어떻게 해결할 수 있을까?

1. Chaining 방식
2. Probing 방식


**Chaining 방식**
- 해시 테이블의 각 슬롯을 **연결 리스트(linked list) 또는 동적 배열** 로 만들어 충돌이 발생하면 해당 슬롯의 리스트에 추가하는 방식
- 장점
	- 해시 테이블의 크기를 크게 만들 필요가 없음.
	- 삭제 연산이 쉽고, 동적으로 리스트 크기를 조절할 수 있음.
	- 해시 충돌이 많아도 성능이 급격히 저하되지 않음.
- 단점
	- 연결 리스트를 사용하므로 **추가적인 메모리 할당 비용** 이 필요함.
	- 포인터 접근이 많아 속도가 상대적으로 느릴 수 있음.

**Open Addressing 방식**
- 충돌이 발생하면 **다른 빈 슬롯을 찾아서 저장** 하는 방식.
- 모든 데이터를 하나의 테이블 내에서 해결하므로, 체이닝처럼 **추가적인 구조(리스트)가 필요하지 않음.**
- 종류
	- 선형 탐사(Linear Probing)
	- 이차 탐사(Quadratic Probing)
		- 
	- 이중 해싱(Double Hashing)
		- h(k, i) = (h1(k) + i * h2(k)) % m
		- 두 개의 해시 함수를 사용하여 충돌이 발생하면 다른 해시 함수를 사용하여 점프.

**선형 탐사**
 - h(k, i) = (h(k) + i) % m
 - 충돌 발생 시 다음 슬롯(`+1`)을 순차적으로 탐색하여 빈 공간을 찾음.
- 장점
	- 구현이 간단하고, 메모리 활용이 효율적.
	- **캐시 적중률(Cache hit rate)이 높아 빠름.**
		- 데이터가 메모리에 연속적으로 배치되어 있으므로, cache hit rate가 높아짐
- 단점
	- **Primary Clustering(1차 클러스터링)** 문제가 발생할 수 있음.
		- 같은 해시 슬롯에 키가 집중되면, 검색 시간이 급격히 증가함.

**이차 탐사**
- h(k, i) = (h(k) + i^2) % m
- 충돌 발생 시 `1^2, 2^2, 3^2, ...` 식으로 점프하면서 탐색.
- 장점
	- **Primary Clustering 문제가 완화** 되어 충돌 시 다른 위치로 이동할 가능성이 높음.
- 단점
	- **Secondary Clustering(2차 클러스터링)** 문제 발생 가능.
	- 특정 경우 슬롯이 겹칠 가능성이 있음.

**이중 해싱**
- 두 개의 해시 함수 `h1(k)` 와 `h2(k)` 를 사용하여, `h2(k)` 를 충돌 시 뛰어넘을 간격으로 사용.
- 장점
	- **Clustering 문제가 거의 발생하지 않음.**
	- 성능이 가장 우수한 경우가 많음.
- 단점
	- **두 개의 해시 함수가 필요** 하므로, 계산량이 증가할 수 있음.
		- 슬롯을 찾는 평균 연산 횟수(Probe Count)가 적다는 뜻
	- 해시 함수 설계가 중요함.
